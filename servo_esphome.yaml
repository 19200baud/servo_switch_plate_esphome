# ESPHome configuration for use with https://www.thingiverse.com/thing:1156995
---
substitutions:
  device: servo_esphome # Set to desired device name in ESPHome
  switch_name: "Default Light Switch" # Set to desired name in Home Assistant
  up_position: 40%
  down_position: -40%
  center_position: 0%

esphome:
  name: ${device}
  platform: ESP8266
  board: d1_mini # Set This To Match Your Board

wifi:
  networks:
    - ssid: !secret wifi_ssid # References WiFi SSID in secrets.yaml
      password: !secret wifi_pass # References WiFi Password in secrets.yaml
#      hidden: true # Uncomment if your WiFi SSID is hidden

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device} # WiFi SSID used when configured connection fails
    password: !secret ap_pass # References AP Wifi Password in secrets.yaml

captive_portal:

# Enable logging
logger:

#web_server: # Optional, Uncomment if wanted
#  port: 80
  
# Enable Home Assistant API
api:

ota:

servo:
  - id: my_servo
    output: pwm_output

output:
  - platform: esp8266_pwm
    id: pwm_output
    pin: D6 # Set this to match the pin you are using
    frequency: 50 Hz # Leave this as-is unless your servo needs a different frequency
    
switch:
  - platform: template
    name: ${switch_name} # Change the name at the top of the file
    optimistic: true # Leave this set unless you add feedback for the switch state
    turn_on_action:
      - script.execute: move_up
    turn_off_action:
      - script.execute: move_down
      
script:
  - id: move_up
    then: 
      - servo.write:
          id: my_servo
          level: ${up_position}
      - delay: 1s
      - servo.write:
          id: my_servo
          level: ${center_position}
      - delay: 2s
      - servo.detach: my_servo
  - id: move_down
    then: 
      - servo.write:
          id: my_servo
          level: ${down_position}
      - delay: 1s
      - servo.write:
          id: my_servo
          level: ${center_position}
      - delay: 2s
      - servo.detach: my_servo
